volumes:
  ctm:

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - SA_PASSWORD=YourStrong(!)Password
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - ctm:/var/opt/mssql
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S sqlserver -U sa -P 'YourStrong(!)Password' -C -Q 'SELECT 1' || exit 1"  ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  customer:
    build:
      context: .
      dockerfile: CustomerManagementApi/Dockerfile
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=CustomerManagement;User=sa;Password=YourStrong(!)Password;Encrypt=false;Application Name=CustomerManagementApi"
    ports:
      - "5001:8080"
    restart: unless-stopped

  template:
    build:
      context: .
      dockerfile: TemplateManagementApi/Dockerfile
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=TemplateManagement;User=sa;Password=YourStrong(!)Password;Encrypt=false;Application Name=TemplateManagementApi"
    ports:
      - "5002:8080"
    restart: unless-stopped

  gateway:
    build:
      context: .
      dockerfile: Gateway/Dockerfile
    depends_on:
      - customer
      - template
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    ports:
      - "5000:8080"
    restart: unless-stopped
    
  auth:
    build:
      context: .
      dockerfile: AuthApi/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    ports:
      - "5003:8080"
    restart: unless-stopped